---
- name: Install PostgreSQL and dependencies
  apt:
    name:
      - postgresql-16
      - postgresql-client-16
      - postgresql-contrib-16
      - python3-psycopg2
      - python3-pip
    state: present
    update_cache: yes
  become: true

- name: Install virtualenv
  apt:
    name: python3-venv
    state: present
  become: true

- name: Create Patroni virtual environment
  command: python3 -m venv /opt/patroni_venv
  args:
    creates: /opt/patroni_venv
  become: true

- name: Install Patroni and its dependencies in virtual environment
  pip:
    name:
      - patroni[etcd]
      - psycopg2-binary
    state: present
    virtualenv: /opt/patroni_venv
  become: true

- name: Check etcd cluster health
  shell: "etcdctl endpoint health --endpoints={{ etcd_hosts }}"
  register: etcd_health
  changed_when: false
  ignore_errors: true

- name: Display etcd health
  debug:
    var: etcd_health.stdout_lines

- name: Ensure PostgreSQL is stopped and disabled
  systemd:
    name: postgresql
    state: stopped
    enabled: no
  become: true

- name: Create empty PostgreSQL data directory
  file:
    path: /var/lib/postgresql/16/main
    state: directory
    owner: postgres
    group: postgres
    mode: "0700"
  become: true

- name: Initialize PostgreSQL data directory
  command: "/usr/lib/postgresql/16/bin/initdb -D /var/lib/postgresql/16/main"
  become: true
  become_user: postgres
  args:
    creates: "/var/lib/postgresql/16/main/PG_VERSION"

- name: Create Patroni configuration
  template:
    src: patroni.yml.j2
    dest: /etc/patroni.yml
    owner: postgres
    group: postgres
    mode: "0640"
  become: true
  vars:
    etcd_hosts: "{{ groups['etcd'] | map('extract', hostvars, ['ansible_host']) | join(':2379,') }}:2379"

- name: Create Patroni systemd service file
  template:
    src: patroni.service.j2
    dest: /etc/systemd/system/patroni.service
    mode: "0644"
  become: true

- name: Stop Patroni on all nodes
  systemd:
    name: patroni
    state: stopped
  become: true

- name: Clear existing Patroni data
  file:
    path: "{{ item }}"
    state: absent
  loop:
    - /var/lib/postgresql/16/main
    - /tmp/patroni.dynamic.json
  become: true

- name: Reload systemd daemon
  systemd:
    daemon_reload: yes
  become: true

- name: Start Patroni on all nodes
  systemd:
    name: patroni
    state: started
  become: true

- name: Enable Patroni service to start on boot
  systemd:
    name: patroni
    enabled: yes
  become: true

- name: Wait for cluster to stabilize
  pause:
    seconds: 60

- name: Check Patroni service logs
  command: journalctl -u patroni -n 50
  register: patroni_logs
  changed_when: false
  become: true

- name: Display Patroni logs
  debug:
    var: patroni_logs.stdout_lines

- name: Check cluster status
  shell: "/opt/patroni_venv/bin/patronictl list"
  register: cluster_status
  changed_when: false
  become: true
  become_user: postgres

- name: Display cluster status
  debug:
    var: cluster_status.stdout_lines

- name: Identify the leader node
  uri:
    url: "http://{{ ansible_default_ipv4.address }}:8008/leader"
    method: GET
  register: leader_check
  ignore_errors: true

- name: Display leader check result
  debug:
    var: leader_check

- name: Set up database on leader node
  block:
    - name: Create database
      postgresql_db:
        name: "{{ postgres_db_name }}"
        state: present
      become: true
      become_user: postgres

    - name: Create database user
      postgresql_user:
        name: "{{ postgres_user }}"
        password: "{{ postgres_user_password }}"
        role_attr_flags: CREATEDB,LOGIN
        db: "{{ postgres_db_name }}"
      become: true
      become_user: postgres

    - name: Grant privileges to user
      postgresql_privs:
        type: database
        database: "{{ postgres_db_name }}"
        roles: "{{ postgres_user }}"
        privs: ALL
      become: true
      become_user: postgres
  when: leader_check.status == 200
