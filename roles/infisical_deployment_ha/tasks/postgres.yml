---
- name: Install PostgreSQL and dependencies
  apt:
    name:
      - postgresql-16
      - postgresql-client-16
      - postgresql-contrib-16
      - python3-psycopg2
      - python3-pip
    state: present
    update_cache: yes
  become: true

- name: Install virtualenv
  apt:
    name: python3-venv
    state: present
  become: true

- name: Create Patroni virtual environment
  command: python3 -m venv /opt/patroni_venv
  args:
    creates: /opt/patroni_venv
  become: true

- name: Install Patroni and its dependencies in virtual environment
  pip:
    name:
      - patroni[etcd3]
      - psycopg2-binary
    state: present
    virtualenv: /opt/patroni_venv
  become: true

- name: Debug print IP
  debug:
    var: ansible_default_ipv4

- name: Download and install etcd
  block:
    - name: Download etcd
      get_url:
        url: "https://github.com/etcd-io/etcd/releases/download/v3.5.1/etcd-v3.5.1-linux-amd64.tar.gz"
        dest: "/tmp/etcd.tar.gz"
      become: true

    - name: Extract etcd
      unarchive:
        src: "/tmp/etcd.tar.gz"
        dest: "/tmp"
        remote_src: yes
      become: true

    - name: Move etcd binaries to /usr/local/bin
      copy:
        src: "/tmp/etcd-v3.5.1-linux-amd64/{{ item }}"
        dest: "/usr/local/bin/{{ item }}"
        mode: "0755"
        remote_src: yes
      loop:
        - etcd
        - etcdctl
      become: true

- name: Create etcd system user
  user:
    name: etcd
    system: yes
    create_home: no
  become: true

- name: Create etcd data directory
  file:
    path: /var/lib/etcd
    state: directory
    owner: etcd
    group: etcd
    mode: "0755"
  become: true

- name: Create etcd systemd service file
  template:
    src: etcd.service.j2
    dest: /etc/systemd/system/etcd.service
    mode: "0644"
  become: true
  notify: Restart etcd

- name: Open etcd ports
  ufw:
    rule: allow
    port: "{{ item }}"
    proto: tcp
  loop:
    - "2379"
    - "2380"
    - "8008"
  become: true

- name: Reload systemd daemon
  systemd:
    daemon_reload: yes
  become: true

- name: Start and enable etcd service
  systemd:
    name: etcd
    state: started
    enabled: yes
  become: true

- name: Ensure etcd is running
  systemd:
    name: etcd
    state: started
  become: true

- name: Wait for etcd to be ready
  wait_for:
    host: "{{ ansible_default_ipv4.address }}"
    port: 2379
    state: started
    timeout: 300

- name: Check etcd logs
  command: journalctl -u etcd -n 50
  register: etcd_logs
  changed_when: false

- name: Display etcd logs
  debug:
    var: etcd_logs.stdout_lines

- name: Check etcd cluster status
  shell: "etcdctl endpoint health --endpoints={{ ansible_default_ipv4.address }}:2379"
  register: etcd_health
  changed_when: false
  become: true
  ignore_errors: true

- name: Display etcd cluster status
  debug:
    var: etcd_health

- name: Check etcd member list
  shell: "etcdctl member list --write-out=table"
  register: etcd_members
  changed_when: false
  become: true
  ignore_errors: true

- name: Display etcd member list
  debug:
    var: etcd_members.stdout_lines

- name: Check network connectivity between etcd nodes
  shell: "ping -c 4 {{ hostvars[item]['ansible_default_ipv4']['address'] }}"
  loop: "{{ groups['postgres'] }}"
  when: inventory_hostname != item
  register: ping_results
  changed_when: false
  ignore_errors: true

- name: Display ping results
  debug:
    var: ping_results

- name: Check etcd cluster status
  shell: "etcdctl endpoint health --endpoints={{ ansible_default_ipv4.address }}:2379"
  register: etcd_health
  changed_when: false
  become: true

- name: Display etcd cluster status
  debug:
    var: etcd_health.stdout_lines

- name: Ensure PostgreSQL is stopped
  systemd:
    name: postgresql
    state: stopped
    enabled: no
  become: true

- name: Create Patroni configuration
  template:
    src: patroni.yml.j2
    dest: /etc/patroni.yml
    owner: postgres
    group: postgres
    mode: "0640"
  become: true

- name: Create Patroni systemd service file
  template:
    src: patroni.service.j2
    dest: /etc/systemd/system/patroni.service
    mode: "0644"
  become: true

- name: Start and enable Patroni service
  systemd:
    name: patroni
    state: started
    enabled: yes
    daemon_reload: yes
  become: true

- name: Wait for Patroni to start
  wait_for:
    host: "{{ ansible_default_ipv4.address }}"
    port: 8008
    state: started
    timeout: 60

- name: Check if this is the leader node
  uri:
    url: "http://{{ ansible_default_ipv4.address }}:8008/leader"
    method: GET
  register: leader_check
  ignore_errors: true

- name: Wait for PostgreSQL to be ready on leader
  wait_for:
    host: "{{ ansible_default_ipv4.address }}"
    port: 5432
    state: started
    timeout: 60
  when: leader_check.status == 200

- name: Check if database exists
  postgresql_query:
    db: postgres
    query: "SELECT 1 FROM pg_database WHERE datname = '{{ postgres_db_name }}'"
  become: true
  become_user: postgres
  register: db_exists
  when: leader_check.status == 200

- name: Create database
  postgresql_db:
    name: "{{ postgres_db_name }}"
    state: present
  become: true
  become_user: postgres
  when:
    - leader_check.status == 200
    - db_exists.rowcount == 0

- name: Create database user
  postgresql_user:
    name: "{{ postgres_user }}"
    password: "{{ postgres_user_password }}"
    role_attr_flags: CREATEDB,LOGIN
    db: "{{ postgres_db_name }}"
  become: true
  become_user: postgres
  when: leader_check.status == 200

- name: Grant privileges to user
  postgresql_privs:
    type: database
    database: "{{ postgres_db_name }}"
    roles: "{{ postgres_user }}"
    privs: ALL
  become: true
  become_user: postgres
  when: leader_check.status == 200

- name: Get cluster status
  shell: "/opt/patroni_venv/bin/patronictl list"
  register: patroni_status
  changed_when: false
  become: true
  become_user: postgres

- name: Display cluster status
  debug:
    var: patroni_status.stdout_lines
